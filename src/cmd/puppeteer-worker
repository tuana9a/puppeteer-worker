#!/usr/bin/env node

const yargs = require("yargs");
const { launch } = require("../index");

const cliParser = yargs
  .usage("Usage: puppeteer-worker")
  .option("worker-type", {
    type: "string",
    requiresArg: false,
  })
  .option("rabbitmq", {
    describe: "the rabbitmq connection string",
    type: "string",
    requiresArg: false,
  })
  .option("import-prefix", {
    type: "string",
    description: "import prefix string from jobDir",
    default: "../../",
  })
  .option("mode", {
    type: "string",
    requiresArg: false,
    choices: ["default", "headless", "visible", "docker"],
    describe: "The puppeteer mode",
  })
  .option("log-dest", {
    type: "string",
    default: "cs",
    choices: ["cs", "fs"],
  })
  .option("log-dir", {
    type: "string",
    default: "./logs/",
  })
  .option("job-dir", {
    type: "string",
    default: "./jobs/",
  })
  .option("tmp-dir", {
    type: "string",
    default: "./tmp/",
  })
  .option("max-try", {
    type: "number",
    default: 10,
  })
  .option("access-token", {
    type: "string",
    requiresArg: false,
  })
  .option("http-worker-pull-config-url", {
    type: "string",
    requiresArg: false,
  });
const options = cliParser.argv;

async function main() {
  const workerController = await launch({
    workerType: options.workerType || process.env.WORKER_TYPE || "http",
    tmpDir: options.tmpDir, // tmp dir currently not used yet
    logDest: options.logDest, // "fs" or "cs"
    logDir: options.logDir,
    secret: options.secret,
    jobDir: options.jobDir,
    httpWorkerPullConfigUrl: options.httpWorkerPullConfigUrl,
    accessToken: options.accessToken,
    jobImportPrefix: options.importPrefix, // the relative path from job-template.db.js
    rabbitmqConnectionString: options.rabbitmq || process.env.RABBITMQ_CONNECTION_STRING,
    maxTry: options.maxTry,
    puppeteerMode: options.mode || process.env.PUPPETEER_MODE || "default", // "default", "headless", "visible", "docker"
  });

  workerController.auto().start();
}

main();
