#!/usr/bin/env node

const yargs = require("yargs");
const { launch } = require("../src/index");

const cliParser = yargs
  .usage("Usage: puppeteer-worker")
  .option("a", {
    alias: "access-token",
    describe: "Your access token to control-plane",
    type: "string",
  })
  .option("c", {
    alias: "control-plane-url",
    describe: "The control-plane url",
    type: "string",
    default: "http://localhost:8080/api/jobs",
  })
  .option("p", {
    alias: "import-prefix",
    type: "string",
    description: "import prefix string from jobDir",
    default: "../../",
  })
  .option("r", {
    alias: "repeat-after",
    type: "number",
    description: "repeat poll jobs after",
    default: 5000,
  })
  .option("s", {
    alias: "secret",
    type: "string",
    description: "worker secret",
  })
  .option("m", {
    alias: "mode",
    type: "string",
    default: "default",
    choices: ["default", "headless", "visible", "docker"],
    describe: "The puppeteer mode",
  })
  .option("log-dest", {
    type: "string",
    default: "cs",
    choices: ["cs", "fs"],
  })
  .option("log-dir", {
    type: "string",
    default: "./logs/",
  })
  .option("job-dir", {
    type: "string",
    default: "./.tmp/",
  })
  .option("tmp-dir", {
    type: "string",
    default: "./.tmp/",
  })
  .option("max-try", {
    type: "number",
    default: 10,
  });
const options = cliParser.argv;

const puppeteerWorker = launch({
  tmpDir: options.tmpDir, // tmp dir for storing things like jobs files
  logDest: options.logDest, // "fs" or "cs"
  logDir: options.logDir,
  secret: options.secret,
  jobDir: options.jobDir,
  jobImportPrefix: options.importPrefix, // the relative path from job-template.db.js
  controlPlaneUrl: options.controlPlaneUrl,
  accessToken: options.accessToken,
  repeatPollJobsAfter: options.repeatAfter,
  maxTry: options.maxTry,
  puppeteerMode: options.mode, // "default", "headless", "visible", "docker"
});

puppeteerWorker.start();
